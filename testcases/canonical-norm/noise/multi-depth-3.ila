# poly_modulus_degree = 8192 * 2
# self.parms.set_coeff_modulus(CoeffModulus.BFVDefault(poly_modulus_degree))
# self.parms.set_plain_modulus(PlainModulus.Batching(poly_modulus_degree, 20))
# Plaintext matrix row size: 8192.0
# Plaintext modulus: 786433
# ==================================
# 
# Coefficient Modulus (q): 1260864178835779834920553696788645403855582773375888727150779106181446108524381258964564013757204357435827521269792769
# 
# Plaintext Modulus   (t): 786433
# 
# Poly  Modulus       (d): 16384
# 
# ==================================
# 
# Variable types:
# c1: cipher <5.0, -5.0, 399392368740452288, 7>
# c2: cipher <25.0, -25.0, 159514264208109405484133780939603968, 7>
# c3: cipher <125.0, -125.0, 63708779829967156964971715809828339934539420442558464, 7>
# c4: cipher <625.0, -625.0, 25444800485854531182540795096004616883301908050107851706203377510645760, 7>
# c5: cipher <3125.0, -3125.0, 10162459138173651756938484598193326959995228006574800575938185455530776117217441643233280, 7>
# c6: cipher <15625.0, -15625.0, 4058808627423229840192480521531334731328708544199453092438951447691683920469178174134895647242033519656960, 7>
# c7: cipher <78125.0, -78125.0, 1621057191970746362621886135115729984239822499104782532699916023903584299905054758390499685819316397128398091356997999919104, 7>
# 
# Type checking ...
# ==================================
# Typecheck error: noise out of bounds for the expression: (c6 & c1)
# Returned error code: 3
# ==================================
# 
# Evaluating ILA Program ...
# Final variable values:
# c1: 2 (remaining noise budget: 360)
# c2: 4 (remaining noise budget: 324)
# c3: 8 (remaining noise budget: 285)
# c4: 16 (remaining noise budget: 247)
# c5: 32 (remaining noise budget: 208)
# c6: 64 (remaining noise budget: 170)
# c7: 128 (remaining noise budget: 132)
# 

c1 : cipher <5, -5, 399392368740452288>;
c2 : cipher <25, -25, 159514264208109405484133780939603968>;
c3 : cipher <125, -125, 63708779829967156964971715809828339934539420442558464>;
c4 : cipher <625, -625, 25444800485854531182540795096004616883301908050107851706203377510645760>;
c5 : cipher <3125, -3125,10162459138173651756938484598193326959995228006574800575938185455530776117217441643233280>;
c6 : cipher <15625, -15625, 4058808627423229840192480521531334731328708544199453092438951447691683920469178174134895647242033519656960>;
c7 : cipher <78125, -78125, 1621057191970746315858208060221717195388167351513845929226855754321030840320963040256411115570664340959618627433870525800576>




c1 := cinit(2);
c2 := (c1 & c1);
c3 := (c2 & c1);
c4 := (c3 & c1);
c5 := (c4 & c1);
c6 := (c5 & c1);
c7 := (c6 & c1)


