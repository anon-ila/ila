$>python3 ila.py usecases/pir.ila
Plaintext matrix row size: 16384.0
Plaintext modulus: 786433
==================================

q bits: 255 

Coefficient Modulus (q): 64934506724255982183186746841560053772887379126419577766909984212125659990938000831819284611073

Plaintext Modulus   (t): 786433

Poly  Modulus       (d): 32768

==================================

Variable types:

Type infering ...
ILA Program has passed type checking.

Evaluating ILA Program ...
Final variable values:
db: [6, 64, 19, 4, 17, 38, 28, 68, 20, 55, 83, 27, 3, 30, 75, 51, 94, 2, 78, 37, 48, 12, 96, 93, 1, 65, 72, 49, 43, 36, 16, 73, 86, 77, 82, 89, 9, 100, 26, 40, 32, 29, 81, 69, 57, 52, 66, 45, 67, 10, 8, 7, 59, 91, 99, 88, 14, 44, 41, 31, 92, 18, 70, 21, 5, 50, 62, 22, 79, 56, 63, 74, 53, 87, 95, 54, 24, 39, 35, 97, 85, 13, 42, 80, 33, 84, 98, 47, 76, 46, 90, 11, 58, 71, 23, 34, 25, 60, 15, 61] (remaining noise budget: [786417, 786315, 786425, 786401, 786335, 786417, 786417, 786347, 786422, 786335, 786345, 786425, 786425, 786356, 786432, 786335, 786410, 786417, 786422, 786413, 786347, 786401, 786374, 786401, 786425, 786431, 786390, 786431, 786408, 786401, 786347, 786390, 786384, 786389, 786413, 786423, 786425, 786429, 786422, 786411, 786374, 786345, 786425, 786413, 786425, 786411, 786380, 786393, 786347, 786356, 786390, 786429, 786426, 786393, 786372, 786410, 786425, 786392, 786423, 786401, 786356, 786417, 786393, 786429, 786393, 786431, 786432, 786380, 786401, 786401, 786429, 786393, 786428, 786345, 786393, 786417, 786390, 786356, 786413, 786401, 786422, 786356, 786425, 786389, 786372, 786417, 786429, 786392, 786401, 786393, 786356, 786372, 786257, 786431, 786413, 786390, 786432, 786422, 786393, 786422])
query: [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (remaining noise budget: [226, 226, 226, 226, 226, 226, 226, 225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226])
result: [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (remaining noise budget: [200, 200, 200, 200, 200, 200, 200, 201, 200, 200, 200, 200, 200, 200, 201, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 200, 200, 200, 200, 201, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 201, 200, 200, 200])
